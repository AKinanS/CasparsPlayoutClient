<?xml version="1.0"?>
<doc>
<assembly>
<name>
CasparsPlayoutClient
</name>
</assembly>
<members>
<member name="T:CasparsPlayoutClient.MediaUpdaterFactory">
	<summary>
 Provides static methods for creationg MediaUpdate Classes
 </summary>
	<remarks></remarks>
</member><member name="T:CasparsPlayoutClient.AbstractMediaUpdater">
	<summary>
 Abstract class for all MediaUpdater classes
 </summary>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.InfoMediaUpdater.updateMedia">
	<summary>
 Updates all playing media items in the playlist
 </summary>
	<remarks></remarks>
</member><member name="P:CasparsPlayoutClient.My.Resources.Resources.ResourceManager">
	<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member><member name="P:CasparsPlayoutClient.My.Resources.Resources.Culture">
	<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member><member name="T:CasparsPlayoutClient.My.Resources.Resources">
	<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member><member name="M:CasparsPlayoutClient.CasparCGConnection.connect">
	<summary>
 Connects to the given server and port and returns true if a connection could be established and false otherwise.
 </summary>
</member><member name="M:CasparsPlayoutClient.CasparCGConnection.connect(System.String,System.Int32)">
	<summary>
 Connects to the given server and port and returns true if a connection could be established and false otherwise.
 </summary>
	<param name="serverAddress">the server ip or hostname</param>
	<param name="serverPort">the servers port</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.CasparCGConnection.connected(System.Boolean)">
	<summary>
 Return whether or not the CasparCGConnection is connect to the server. If tryConnect is given and true, it will try to establish a connection if not allready connected.
 </summary>
	<param name="tryConnect"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.CasparCGConnection.sendAsyncCommand(System.String)">
	<summary>
 Sends a command to the casparCG server and returns imediatly after sending no matter if the command was accepted or not.
 </summary>
	<param name="cmd"></param>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.CasparCGConnection.sendCommand(System.String)">
	<summary>
 Sends a command to the casparCG server and returns a CasparCGResonse.
 sendCommand will wait until it receives a returncode. So it may stay longer inside the function.
 If the given commandstring has more than one casparCG command, the response will be only for one of those!
 </summary>
	<param name="cmd"></param>
</member><member name="M:CasparsPlayoutClient.CasparCGCommandFactory.escape(System.String)">
	<summary>
 Escapes the string str as needed for casparCG Server
 </summary>
	<param name="str"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.Library.refreshLibrary">
	<summary>
 Rereads the Server List of Mediafiles and refreshs the Library.
 </summary>
	<remarks></remarks>
</member><member name="T:CasparsPlayoutClient.Library">
	<summary>
 Represents the media library of the casparCG Server.
 Allows to get items of given type, all items or filterd matches.
 </summary>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.PlaylistMovieItem.#ctor(System.String,CasparsPlayoutClient.ServerController@,CasparsPlayoutClient.CasparCGMovie,System.Int32,System.Int32,System.Int64)">
	<summary>
 Create a PlaylistMovieItem. If a duration is given and smaller than the original duration of the file, the file will only be played for that long.
 </summary>
	<param name="name"></param>
	<param name="controller"></param>
	<param name="movie"></param>
	<param name="duration"></param>
	<remarks></remarks>
</member><member name="T:CasparsPlayoutClient.logger">
	<summary>
 This module is a logging and debugging utility which provides functions for logging eighter to a file or a console
 </summary>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.fileLogger.#ctor(System.Byte,System.String,System.Boolean,System.Boolean)">
	<summary>
 Creates a new fileLogger which writes log messages at a given loglevel and lower to a logfile
 </summary>
	<param name="loglevel">the loglevel between 0 (critical error) and greater/equal 4 (debug)</param>
	<param name="logfile">the filename with path to the logfile</param>
	<param name="directWrite">enables imediate writing of every messages to file. If disabled, messages will only be written when manuelly flushed or logger closed</param>
	<param name="appendExisting">enables appending to existing files. If disabled, old logfiles will be overwritten</param>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.LibraryView.addMediaItem(CasparsPlayoutClient.CasparCGMedia@)">
	<summary>
 Adds a CasparCGMedia to the LibraryView
 </summary>
	<param name="mediaItem"></param>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getOriginalMediaDuration(CasparsPlayoutClient.CasparCGMedia@)">
	<summary>
 Returns the media duration in milliseconds if playing in native fps.
 </summary>
	<param name="media"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getMediaDuration(CasparsPlayoutClient.CasparCGMedia@,System.Int32)">
	<summary>
 Returns the media duration in milliseconds if playing at a given channel.
 </summary>
	<param name="media"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.containsChannel(System.Int32)">
	<summary>
 Returns whether or not, the given channel is configured at the connected CasparCGServer
 </summary>
	<param name="channel">the channel number to check for</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getFreeLayer(System.Int32)">
	<summary>
 Returns the smallest free layer of the given channel
 </summary>
	<param name="channel"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.isLayerFree(System.Int32,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Returns whether or not a layer of a channel is free, which means no producer is playing on it.
 </summary>
	<param name="layer"></param>
	<param name="channel"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getTimeStringOfMS(System.Int64)">
	<summary>
 Returns the given number of milliseconds as a formated String "*hh:mm:ss.µµ" where h = hours, m = minutes, s = seconds and µ = milliseconds.
 </summary>
	<param name="milliseconds"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getTimeInMS(System.Int64,System.Int32)">
	<summary>
 Returns the time in milliseconds needed to play the given number of frames at a specified framerate.
 </summary>
	<param name="frames">the number of frames</param>
	<param name="fps">the framerate multiplied by 100 to avoid floating numbers like 59.94.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getChannelFPS(System.Int32)">
	<summary>
 Returns the framerate of the spezified channel or 0 if the channel does not exist.
 </summary>
	<param name="channel"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.ServerController.getMediaList">
	<summary>
 Returns a Dictionary of all media and templates on the server key by their names.
 If withMediaInfo is true, all mediaItems will have filled mediaInfo which is default but need more time.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.FrameTicker.#ctor(CasparsPlayoutClient.CasparCGConnection@,CasparsPlayoutClient.ServerController,System.Int32,System.Int32)">
	<summary>
 Creates a new ticker instance.
 </summary>
	<param name="con">the connection to poll the channels for the actual frame number</param>
	<param name="controller">the servercontroler</param>
	<param name="interpolationTime">the number of milliseconds between each servercall. In that time, the frame tick will be interpolated by a local timer which may differ from the servers real values.</param>
	<param name="frameInterval">the desired interval in which frameTickEvents should be rissen. This is just a desired value and will only give a upper bound but not a lower bound. Default is 1 tick per frame</param>
	<remarks></remarks>
</member><member name="T:CasparsPlayoutClient.FrameTicker">
	<summary>
 A ticker class which raises events if a frame change is noticed in one of the casparCG channels. 
 There is no waranty that a tick will be rissen for every framechange at all, but the frame number send should be close to the real one.
 The period of ticks is close to "per frame" but will increase with every handler added for the frameTickEvent. 
 Nevertheless, the precision of the frame number given by the event will not be affect much by increasing the eventHandler count.
 During each poll request to the server for the current frame number, a short period of interpolated ticks will be rissen.
 These are only calculated and not proofed to be in correct sync to the server. The length of this period could be configured.
 Use bigger values if you have a poor network  conncetion. Default is 5 seconds (5000ms). It is possible that there will be no 
 interpolated tick at all if the proccessing of the poll and raising the event takes longer than the given period.
 In that case, you will only get received values form the server when they arrive.
 It is very likley that the given frame number is behind the frame number at the servers channel by a few frames.
 Since this delay may differ depending on your networkconnection and hardware, it should be, more or less, constant 
 and will be minimized by a simple compensation technique.
 
 To take load off your cpu, you could set a upper bound to the frequency at which frameTickEvents should be rissen.
 As a default, it will be tried to raise one for every frame. But this is just a trie. Depending on your hardware and the number
 of EventHandler, it may be only every few frames.
 If you don't need high frequencies, use higher values to take load off your cpu.
 Take in mind, that the bound will be related to the channel with the highest fps. So if you have a channel with p25 and one with p50 and
 a frameInterval of 4, channel p50 will tick not more than every 4 frames but channel p25 could still tick every 2 frames.
  
 Start tick() in a new Thread and register handlers for the frameTick event. 
 Keep in mind to use delegates since the event will likely to be rissen by a different thread.
 </summary>
	<remarks></remarks>
</member><member name="T:CasparsPlayoutClient.frameTickEventArgs">
	<summary>
 The frameTick event result containing the channel which ticked and the actual framenumber.
 </summary>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.PlaylistItem.#ctor(System.String,CasparsPlayoutClient.PlaylistItem.PlaylistItemTypes,CasparsPlayoutClient.ServerController@,System.Int32,System.Int32,System.Int64)">
	<summary>
 Constructor for a generic PlaylistItem (Should be called by Subclasses)
 </summary>
	<param name="name"></param>
	<param name="itemType"></param>
	<param name="controller"></param>
	<param name="duration"></param>
	<remarks></remarks>
</member><member name="M:CasparsPlayoutClient.PlaylistItem.start(System.Boolean)">
	<summary>
 Start this item and all childItems. If noWait is given and false, start will wait till all items has been stopped and then end,
 else it will start each item and then end imediatly
 </summary>
	<param name="noWait"></param>
	<remarks></remarks>
</member>
</members>
</doc>